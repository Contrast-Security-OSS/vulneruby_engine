# frozen_string_literal: true

require_relative '../test_case'

# This test covers the runtime discovery of Vulnerabilities in the Assess
# feature set of the Contrast Agent.
class VulnerabilityTestCase < TestCase
  def self.msg_source
    'traces'
  end

  def initialize data
    super
    @rule_id = data['rule_id']
    @dataflow = data['dataflow']
    @trigger_class = data['trigger_class']
    @trigger_method = data['trigger_method']
  end

  def name
    @rule_id
  end

  # Determines if at least one message from our msg_source matches this
  # testcase.
  #
  # @param reported_messages [Array<Hash>] an array of JSON representing the
  #   Trace reports sent by the Contrast Service during this test run.
  def assert! reported_messages
    @found = reported_messages.any? { |vulnerability| vulnerability_match?(vulnerability) }
  end

  private

  # A reported vulnerability matches this test if it is of the same rule type
  # and is either not dataflow or is dataflow and has the expected events, as
  # determined by their signature
  #
  # @param reported_vulnerability [Hash] JSON representing an entity from the
  #   Traces report
  # @return [Boolean]
  def vulnerability_match? reported_vulnerability
    return false unless reported_vulnerability['ruleId'] == @rule_id
    return true unless dataflow?

    reported_vulnerability['events'].any? do |action|
      signature = action['signature']
      signature['className'] == @trigger_class && signature['methodName'] == @trigger_method
    end
  end

  # Is the vulnerability being tested for of a dataflow type?
  #
  # @return [Boolean]
  def dataflow?
    !!@dataflow
  end
end
